1.section .data

	str1 : db 'Enter Size of First Array :  '
	len1 equ $ -str1
	str2 : db 'Enter Elements of First Array :',10
	len2 equ $ -str2
	str3 : db 'Enter Size of Second Array : '
	len3 equ $ -str3
	str4 : db 'Enter Elements of Second Array :',10
	len4 equ $ -str4
	str5 : db 'Combined Sorted Array : ',10
	len5 equ $ -str5
	zero : db 48
	space : db ' '
	newline : db 10
	
section .bss
	
	count  : resb 1
	temp   : resb 1
	num    : resw 1
	size   : resw 1
	array1 : resw 50
	array2 : resw 50
	array3 : resw 50
	n      : resw 1
	m      : resw 1
	i      : resw 1
	j      : resw 1
	k      : resw 1
	total  : resw 1
	
section .text
global _start
_start :

	mov eax, 4
	mov ebx, 1
	mov ecx, str1
	mov edx, len1
	int 80h
	
	call read_num
	mov ax,word[num]
	mov word[n],ax
	mov word[size],ax
	mov eax, 4
	mov ebx, 1
	mov ecx, str2
	mov edx, len2
	int 80h
	mov eax, 0
	mov ebx, array1
	call read_array
	
	
	mov eax, 4
	mov ebx, 1
	mov ecx, str3
	mov edx, len3
	int 80h
	
	call read_num
	mov ax,word[num]
	mov word[m],ax
	mov word[size],ax
	mov eax, 0
	mov ebx, array2
	call read_array
	
	
	
	
	mov word[i],0
	mov word[j],0
	mov word[k],0
	mov ax,0
	mov ax,word[n]
	add ax,word[m]
	dec ax
	mov word[total],ax
	mov ebx,array1
	
	
merge : 
	
	mov eax,0
	mov ecx,0
	mov ax,word[i]
	mov cx,word[j]
	
	
	
	mov edx,array2
	mov ax,word[edx + 2*ecx]
	
	
	
	
	cmp word[ebx],ax
	jb insert1
	
	jmp insert2
	
	

insert1 :

	
	mov ax,word[ebx]
	mov word[num],ax
	call print_num
	inc word[k]
	
	mov edx,0
	mov dx,word[k]
	cmp dx,word[total]
	ja end_array
	mov ax,word[i]
	cmp ax,word[n]
	jb inci
back1  :

	jmp merge
	
	
insert2 :
	
	mov edx,0
	mov eax,array2
	mov dx,word[j]
	
	mov cx,word[eax + 2*edx]
	
	
	mov word[num],cx
	
	call print_num
	inc word[k]
	mov edx,0
	mov dx,word[k]
	cmp dx,word[total]
	ja end_array
	mov ax,word[j]
	cmp ax,word[m]
	jb incj
back2  :
	jmp merge
	
inci :

	inc word[i]
	mov eax,0
	mov ax,word[n]
	cmp word[i],ax
	je print2
	add ebx,2
	jmp back1
	
	
incj :

	inc word[j] 
	mov eax,0
	mov ax,word[m]
	cmp word[j],ax
	je print1
	jmp back2
	
print2:
	mov eax,array2
	mov edx,0
	mov dx,word[j]
	cmp dx,word[m]
	je end_array
	mov cx,word[eax + 2*edx]
	mov word[num],cx
	call print_num
	inc word[j]
	jmp print2
	
print1:
	mov eax,array1
	mov edx,0
	mov dx,word[i]
	cmp dx,word[n]
	je end_array
	mov cx,word[eax + 2*edx]
	mov word[num],cx
	call print_num
	inc word[i]
	jmp print1
	
end_array :

	
	jmp exit
	
	
	
	
	
exit :	
	mov eax, 1
	mov ebx, 0
	int 80h

	


read_array:

	read_loop:
	cmp ax,word[size]
	je read_end
	call read_num
	mov cx,word[num]
	mov word[ebx+2*eax],cx
	inc eax
	jmp read_array

read_end:
	ret
	
	
print_array :
	
	pusha
	mov ax,0
	
print_loop :

	cmp ax,word[size]
	je print_end
	mov cx,word[ebx + 2*eax]
	mov word[num],cx
	call print_num
	inc ax
	jmp print_loop
	
print_end :

	popa 
	ret





read_num:

	pusha
	mov word[num], 0

loop_read:

	mov eax, 3
	mov ebx, 0
	mov ecx, temp
	mov edx, 1
	int 80h
	cmp byte[temp], 10
	je end_read
	mov ax, word[num]
	mov bx, 10
	mul bx
	mov bl, byte[temp]
	sub bl, 30h
	mov bh, 0
	add ax, bx
	mov word[num], ax
	
	jmp loop_read

end_read:

	popa
	ret



print_num:
    	cmp word[num],0
	je print_zero
	mov byte[count],0
	pusha

extract_no:
	cmp word[num], 0
	je print_no
	inc byte[count]
	mov dx, 0
	mov ax, word[num]
	mov bx, 10
	div bx
	push dx
	mov word[num], ax
	jmp extract_no

print_no:
	cmp byte[count], 0
	je end_print
	dec byte[count]
	pop dx
	mov byte[temp], dl
	add byte[temp], 30h
	mov eax, 4
	mov ebx, 1
	mov ecx, temp
	mov edx, 1
	int 80h
	
	jmp print_no

end_print:
	mov eax, 4
	mov ebx, 1
	mov ecx, space
	mov edx, 1
	int 80h
	popa
	ret
	
print_zero:
	mov eax, 4
	mov ebx, 1
	mov ecx, space
	mov edx, 1
	int 80h
    	pusha
	mov eax, 4
	mov ebx, 1
	mov ecx, zero
	mov edx, 1
	int 80h
	popa 
    	ret
    	
    	
2.section .bss
num: resw 1 ;For storing a number, to be read of printed....
nod: resb 1 ;For storing the number of digits....
temp: resb 2
matrix1: resw 200
m: resw 1
n: resw 1
i: resw 1
j: resw 1
section .data
msg1: db "Enter the number of rows in the matrix : "
msg_size1: equ $-msg1
msg2: db "Enter the elements one by one(row by row) : "
msg_size2: equ $-msg2
msg3: db "Enter the number of columns in the matrix : "
msg_size3: equ $-msg3
msg4: db " The matrix is : "
msg_size4: equ $-msg4
msg5: db " Transpose is : "
msg_size5: equ $-msg5
tab: db 9 ;ASCII for vertical tab
new_line: db 10 ;ASCII for new line
section .text
global _start
_start:
mov eax, 4
mov ebx, 1
mov ecx, msg1
mov edx, msg_size1
int 80h
mov ecx, 0
;calling sub function read num to read a number
call read_num
mov cx, word[num]
mov word[m], cx
mov eax, 4
mov ebx, 1
mov ecx, msg3
mov edx, msg_size3
int 80h
mov ecx, 0
call read_num
mov cx, word[num]
mov word[n], cx
mov eax, 4
mov ebx, 1
mov ecx, msg2
mov edx, msg_size2
int 80h
;Reading each element of the matrix........
mov eax, 0
mov ebx, matrix1
mov word[i], 0
mov word[j], 0
i_loop:
mov word[j], 0
j_loop:
call read_num
mov dx , word[num]
;eax will contain the array index and each element is 2 bytes(1 word) long
mov word[ebx + 2 * eax], dx
inc eax ;Incrementing array index by one....
inc word[j]
mov cx, word[j]
cmp cx, word[n]
jb j_loop
inc word[i]
mov cx, word[i]
cmp cx, word[m]
jb i_loop
pusha
mov eax, 4
mov ebx, 1
mov ecx, msg4
mov edx, msg_size4
int 80h
popa
pusha
mov eax, 4
mov ebx, 1
mov ecx, new_line
mov edx, 1
int 80h
popa
mov eax, 0
mov ebx, matrix1
mov word[i], 0
mov word[j], 0
i_loop3:
mov word[j], 0
j_loop3:
;eax will contain the array index and each element is 2 bytes(1 word) long
mov dx, word[ebx + 2 * eax] ;
mov word[num] , dx
call print_num
;Printing a space after each element.....
pusha
mov eax, 4
mov ebx, 1
mov ecx, tab
mov edx, 1
int 80h
popa
inc eax
inc word[j]
mov cx, word[j]
cmp cx, word[n]
jb j_loop3
pusha
mov eax, 4
mov ebx, 1
mov ecx, new_line
mov edx, 1
int 80h
popa
inc word[i]
mov cx, word[i]
cmp cx, word[m]
jb i_loop3

pusha
mov eax, 4
mov ebx, 1
mov ecx, msg5
mov edx, msg_size5
int 80h
popa
pusha
mov eax, 4
mov ebx, 1
mov ecx, new_line
mov edx, 1
int 80h
popa

;Printing each element of the matrix
mov eax, 0
mov ecx, 0
mov ebx, matrix1
mov word[i], 0
mov word[j], 0
i_loop2:
mov word[i], 0
mov eax, ecx
j_loop2:
;eax will contain the array index and each element is 2 bytes(1 word) long
mov dx, word[ebx + 2 * eax] ;
mov word[num] , dx
call print_num
;Printing a space after each element.....
pusha
mov eax, 4
mov ebx, 1
mov ecx, tab
mov edx, 1
int 80h
popa
add eax,dword[n]
inc word[i]
mov cx, word[i]
cmp cx, word[m]
jb j_loop2
pusha
mov eax, 4
mov ebx, 1
mov ecx, new_line
mov edx, 1
int 80h
popa
inc ecx
;mov dword[num],eax
;call print_num
inc word[j]
mov cx, word[j]
cmp cx, word[n]
jb i_loop2
;Exit System Call.....
exit:
mov eax, 1
mov ebx, 0
int 80h
;Function to read a number from console and to store that in num
read_num:
pusha
mov word[num], 0
loop_read:
mov eax, 3
mov ebx, 0
mov ecx, temp
mov edx, 1
int 80h
cmp byte[temp], 10
je end_read
mov ax, word[num]
mov bx, 10
mul bx
mov bl, byte[temp]
sub bl, 30h
mov bh, 0
add ax, bx
mov word[num], ax
jmp loop_read
end_read:
popa
ret
;Function to print any number stored in num...
print_num:
pusha
extract_no:
cmp word[num], 0
je print_no
inc byte[nod]
mov dx, 0
mov ax, word[num]
mov bx, 10
div bx
push dx
mov word[num], ax
jmp extract_no
print_no:
cmp byte[nod], 0
je end_print
dec byte[nod]
pop dx
mov byte[temp], dl
add byte[temp], 30h
mov eax, 4
mov ebx, 1
mov ecx, temp
mov edx, 1
int 80h
jmp print_no
end_print:
popa
ret


3.section .bss
num: resw 1
nod: resb 1 
temp: resb 2
count:resb 1
matrix1: resw 100
sum : resw 10
n: resd 1 
i: resd 1
j:resd 1
section .data
tab: db 9 
new_line: db 10

section .data
msg1: db 'enter n',10
l1: equ $-msg1
msg2: db 'sum of squares of principal diagonal is',10
l2:equ $-msg2
msg3: db 'enter matrix  elements row wise',10
l3: equ $-msg3


section .text
global _start
_start:
mov eax,4
mov ebx,1
mov ecx,msg1
mov edx,l1
int 80h

mov ecx, 0
call read_num
mov cx, word[num]
mov word[n], cx


mov eax,4
mov ebx,1
mov ecx,msg3
mov edx,l3
int 80h

mov eax, 0
mov ebx, matrix1
mov word[i], 0

i_loop:
mov word[j], 0
j_loop:
call read_num
mov dx , word[num]
mov word[ebx + 2 * eax], dx
inc eax
inc word[j]
mov cx, word[j]
cmp cx, word[n]
jb j_loop
inc word[i]
mov cx, word[i]
cmp cx, word[n]
jb i_loop

 
 mov eax,4
mov ebx,1
mov ecx,msg2
mov edx,l2
int 80h 

mov ecx, 0
mov ebx, matrix1
mov word[i], 0

mov word[sum],0


i_loop2:
mov dx,word[n]
cmp word[i],dx
je over
mov dx,word[ebx + 2 * ecx]
;mov word[num],dx
mov ax,dx
mul dx
add word[sum],ax
add ecx,dword[n]
inc ecx
inc word[i]

jmp  i_loop2

over:
mov dx,word[sum]
mov word[num],dx
 cmp word[num],0
    je looo
    call print_num
    jmp zoo
    looo:
    call zeroo
    zoo:


mov eax,1
mov ebx,0
int 80h

read_num :
    pusha
    mov word[num],0
loop_read :
    mov eax, 3
    mov ebx ,0
    mov ecx, temp
    mov edx, 1
    int 80h
    cmp byte[temp],10
    je end_read
    mov ax, word[num]
    mov bx, 10
    mul bx
    mov bl, byte[temp]
    sub bl, 30h
    mov bh, 0
    add ax, bx
    mov word[num],ax
    jmp loop_read
end_read :
    popa
    ret
    
 print_num :
   mov byte[count],0
   pusha
extract_no :
   cmp word[num],0
   je print_no
   inc byte[count]
   mov dx,0
   mov ax,word[num]
   mov bx,10
   div bx
   push dx
   mov word[num],ax
   jmp extract_no
print_no :
   
    cmp byte[count],0
    je end_print
    dec byte[count]
    pop dx
    mov byte[temp],dl
    add byte[temp],30h
    mov eax,4
    mov ebx,1
    mov ecx,temp
    mov edx,1
    int 80h
    jmp print_no
end_print :
    popa
    ret


zeroo:
    pusha
    mov byte[temp],0
    add byte[temp],30h
    mov eax,4
    mov ebx,1
    mov ecx,temp
    mov edx,1
    int 80h

    popa
    ret

4.
section .data
In1:db 'Enter the Sentence : '
In1n: equ $-In1
In2:db 'Enter the Word : '
In2n: equ $-In2
S1:db 'Word is NOT Present',0Ah
S1n: equ $-S1
S2:db 'Number of times the word occurs: '
S2n: equ $-S2
newline:db 10


section .bss
sentence:resb 201   ;Sentence
str2:resb 51		;Word
Res:resd 1			;For read_str
temp:resb 1
i:resd 1			;To store position in sentence while Traversal
flag:resw 1			;To count occurences [P.S : Also acts as flag (if ==0) ]
count:resb 1
num:resw 1


section .text
global _start
_start:

;Sentence Input
mov eax,4
mov ebx,1
mov ecx,In1
mov edx,In1n
int 80h
mov eax,sentence
mov dword[Res],eax
call Read_Str

;Word Input
mov eax,4
mov ebx,1
mov ecx,In2
mov edx,In2n
int 80h
mov eax,str2
mov dword[Res],eax
call Read_Str

mov word[flag],0

;Comparing
call Compare

;Setting S1 or S2 msg
cmp word[flag],0
je not_msg

;Words are Present
mov eax,4
mov ebx,1
mov ecx,S2
mov edx,S2n
int 80h

;Printing no.of occurences
mov ax,word[flag]
mov word[num],ax
call print_num
call Newline_print
jmp End_Program

not_msg:
mov eax,4
mov ebx,1
mov ecx,S1
mov edx,S1n
int 80h

End_Program:
mov eax,1
int 80h




Newline_print:
pusha
mov eax,4
mov ebx,1
mov ecx,newline
mov edx,1
int 80h
popa
ret


Read_Str:
pusha
mov eax,dword[Res]
mov ebx,0
Str_loop:
call read_char
cmp byte[temp],10
je endStr_loop
mov cl,byte[temp]
mov byte[eax+ebx],cl
inc ebx
jmp Str_loop

endStr_loop:		   ;3 null characters just to be safe
mov byte[eax+ebx],0    ;3 may not be needed
inc ebx
mov byte[eax+ebx],0
inc ebx
mov byte[eax+ebx],0
popa
ret

read_char:
pusha
mov eax,3
mov ebx,0
mov ecx,temp
mov edx,1
int 80h
popa
ret


Compare:
pusha
mov eax,sentence
mov dword[i],eax

word_cmp:			;Going to the end of Sentence
mov ebx,dword[i]
cmp byte[ebx],0
je cmp_ret
call str_cmp		;Comparing word-by-word
jmp word_cmp

cmp_ret:
popa
ret

str_cmp:			;For comparing word 
pusha
mov ebx,str2
mov ecx,0

loop_cmp:
mov eax,dword[i]
cmp byte[ebx+ecx],0
je end_str_cmp
mov dl,byte[eax]
cmp dl,byte[ebx+ecx]
jne ret_str_cmp
inc dword[i]
inc ecx
jmp loop_cmp

end_str_cmp:
cmp byte[eax],32
je flag_imp
cmp byte[eax],0
je flag_imp

ret_str_cmp:
call move_i
popa
ret

flag_imp:			;If flag==0 at end, then not present
inc word[flag]
jmp ret_str_cmp


move_i:			;For moving to next word
pusha
loop_move:
mov ebx,dword[i]
cmp byte[ebx],32
je end_move_i	  ;Moving to next word
cmp byte[ebx],0
je ret_move_i	  ;This was last word => end reached
inc dword[i]
jmp loop_move

end_move_i:
inc dword[i]

ret_move_i:
popa
ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
print_num:	;Normal Print_Num
pusha
mov byte[count],0
extract_no:
mov ax,word[num]
mov dx,0
mov bx,10
div bx
push dx
inc byte[count]
mov word[num],ax
cmp word[num],0
je printdig
jmp extract_no

printdig:
cmp byte[count],0
je endprint
pop dx
add dl,30h
mov byte[temp],dl
dec byte[count]
mov eax,4
mov ebx,1
mov ecx,temp
mov edx,1
int 80h
jmp printdig

endprint:		;Printing space at the end (not needed)
mov byte[temp],32
mov eax,4
mov ebx,1
mov ecx,temp
mov edx,1
int 80h
popa
ret

5.section .data
msg1: db "Enter Number of digits: "
len1: equ $-msg1
msg2: db "Enter an Element: "
len2: equ $-msg2
msg3: db "Elements after sorting: "
len3: equ $-msg3
msg4: db " "
len4: equ $-msg4
msg5: db 0Ah
len5: equ $-msg5

section .bss
n: resw 1
n2: resw 1
temp1: resb 1
ar: resw 100
count: resw 1
count1: resw 1
count2: resw 1
temp2: resw 1
temp3: resw 1
nod:resb 1

section .text
global _start:
_start:
mov eax,4
mov ebx,1
mov ecx,msg1
mov edx,len1
int 80h

mov word[n],0
mov word[n2],0

read_n:
mov eax,3
mov ebx,0
mov ecx,temp1
mov edx,1
int 80h

cmp byte[temp1],10
je print_msg2

mov ax,word[n]
mov bx,10
mul bx
movzx bx,byte[temp1]
sub bx,30h
add ax,bx
mov word[n],ax
jmp read_n

print_msg2:

mov ebx,ar
read_array:
push ebx
mov word[n2],0
mov eax,4
mov ebx,1
mov ecx,msg2
mov edx,len2
int 80h

read_ele:
mov eax,3
mov ebx,0
mov ecx,temp1
mov edx,1
int 80h

cmp byte[temp1],10
je continue_read_arr

mov ax,word[n2]
mov bx,10
mul bx
movzx bx,byte[temp1]
sub bx,30h
add ax,bx
mov word[n2],ax
jmp read_ele

continue_read_arr:
pop ebx
mov cx,word[n2]
mov word[ebx],cx
add bx,16
add word[count],1
mov cx,word[count]
cmp cx,word[n]
je sort

jmp read_array

sort:
mov eax,4
mov ebx,1
mov ecx,msg3
mov edx,len3
int 80h
mov word[count1],0
mov word[count2],0
mov ebx,ar
mov edx,ar
mov ax,word[n]
push ax
for1:
pop ax
cmp word[count1],ax
je print_array
push ax
mov edx,ebx
mov cx,word[count1]
mov word[count2],cx
for2:
pop ax
cmp word[count2],ax
je after_for2
push ax
mov ax,word[ebx]
mov cx,word[edx]
cmp ax,cx
jl no_swap
	swap:
	   mov word[ebx],cx
	   mov word[edx],ax
no_swap:
inc word[count2]
add edx,16
jmp for2
after_for2:
push ax
inc word[count1]
add ebx,16
jmp for1

print_array:
mov word[count1],0
mov ebx,ar

printloop:
mov ax,word[n]
cmp ax,word[count1]
je exit
mov cx,word[ebx]
mov word[count],cx

mov byte[nod],0

number_extract:
cmp word[count],0
je print_no
inc byte[nod]
mov dx,0
mov ax,word[count]
mov bx,10
div bx
push dx
mov word[count],ax
jmp number_extract

print_no:
cmp byte[nod],0
je after_print_no
dec byte[nod]
pop dx
mov word[temp1],dx
add word[temp1],30h

mov eax,4
mov ebx,1
mov ecx,temp1
mov edx,1
int 80h
jmp print_no

after_print_no:

mov eax,4
mov ebx,1
mov ecx,msg4
mov edx,len4
int 80h

inc word[count1]
mov eax,16
mul word[count1]
mov ebx,ar
add ebx,eax
jmp printloop

exit:
mov eax,4
mov ebx,1
mov ecx,msg5
mov edx,len5
int 80h

mov eax,1
mov ebx,0
int 80h

6.
section .bss
string: resb 100
string_len: resw 1
char: resb 1
temp: resb 1
ans: resw 1
num: resw 1
count: resb 1
i: resw 1

section .data
msg1: db "Enter the string: "
len1: equ $-msg1
msg2: db "Enter the number 1: "
len2: equ $-msg2
msg3: db "Enter the number 2: "
len3: equ $-msg3
msg4: db "Here! ", 10
len4: equ $-msg4
newline: db 10
zero: db 0

global _start
section .text
_start:

mov eax, 4
mov ebx, 1
mov ecx, msg1
mov edx, len1
int 80h

call read_string
call print_string

mov ax, word[string_len]
mov word[num], ax
call print_num

mov eax, 0
mov ebx, string

pusha
mov eax, 4
mov ebx, 1
mov ecx, msg2
mov edx, len2
int 80h
popa
call read_num

while1:
cmp ax, word[num]
je end_while1

inc eax
jmp while1

end_while1:
pusha
mov eax, 4
mov ebx, 1
mov ecx, msg3
mov edx, len3
int 80h
popa
call read_num

while:
cmp ax, word[num]
je end

mov cl, byte[ebx+eax]
mov byte[temp], cl

pusha
mov eax, 4
mov ebx, 1
mov ecx,     temp
mov edx, 1
int 80h
popa

inc eax
jmp while

end:
mov eax, 1
int 80h


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

mov word[string_len], 0
read_string:
mov ebx, string
mov eax, 0
pusha 

reading:
pusha
mov eax, 3
mov ebx, 0
mov ecx, temp
mov edx, 1
int 80h
popa

cmp byte[temp], 10
je end_reading
inc word[string_len]
mov cl, byte[temp]
mov byte[ebx+eax], cl
inc eax
jmp reading

end_reading:
mov byte[ebx+eax], 0
popa
ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

print_string:
mov ebx, string
pusha
printing:
mov al, byte[ebx]
cmp al, 0
je end_printing

mov byte[temp], al
push ebx
mov eax, 4
mov ebx, 1
mov ecx, temp
mov edx, 1
int 80h
pop ebx
inc ebx
jmp printing

end_printing:
mov eax, 4
mov ebx, 1
mov ecx, newline
mov edx, 1
int 80h
popa
ret


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

read_num:

	pusha
	mov word[num], 0

loop_read:

	mov eax, 3
	mov ebx, 0
	mov ecx, temp
	mov edx, 1
	int 80h
	cmp byte[temp], 10
	je end_read
	mov ax, word[num]
	mov bx, 10
	mul bx
	mov bl, byte[temp]
	sub bl, 30h
	mov bh, 0
	add ax, bx
	mov word[num], ax
	jmp loop_read

end_read:

popa
ret


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


print_num:
	cmp word[num],0
	je printzero
	mov byte[count],0
	pusha

extract_no:
	cmp word[num], 0
	je print_no
	inc byte[count]
	mov dx, 0
	mov ax, word[num]
	mov bx, 10
	div bx
	push dx
	mov word[num], ax
	jmp extract_no

print_no:
	cmp byte[count], 0
	je end_print
	dec byte[count]
	pop dx
	mov byte[temp], dl
	add byte[temp], 30h
	mov eax, 4
	mov ebx, 1
	mov ecx, temp
	mov edx, 1
	int 80h
	jmp print_no

end_print:
	mov eax,4
	mov ebx,1
	mov ecx,newline
	mov edx,1
	int 80h
	popa
	ret

printzero :
	mov eax,4
	mov ebx,1
	mov ecx,zero
	mov edx,1	
	int 80h
	
	mov eax,1
	int 80h
	


























