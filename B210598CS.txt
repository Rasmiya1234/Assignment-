4.section .data
	newl : db 10

	msg1: db 'enter elements of array',10
	siz1 : equ $-msg1

	msgn : db 'enter size of array',10
	sizn :  equ $-msgn

	msg2 : db 'enter element to search',10
	siz2 : equ $-msg2
	
	msg3:db 'element found',10
	siz3:equ $-msg3
	
	msg4:db 'element Not found',10
	siz4:equ $-msg4

section .bss

	number : resw 1
	temp : resw 1
	count : resw 1
	array : resw  100
	n : resw 1
	i : resw 1
	j : resw 1
	k : resw 1
 	l : resb 1
 	m : resb 1

section .text
	global _start:
_start:
	mov byte[l],1
	mov byte[m],0
	mov eax,4
	mov ebx,1
	mov ecx,msgn 
	mov edx,sizn
	int 80h

	call read_number
	mov ax ,word[number]
	mov word[n],ax

	mov eax,4
	mov ebx,1
	mov ecx,msg1 
	mov edx,siz1
	int 80h

	mov eax,0
	mov ebx,array

	call read_array
	mov eax,4
	mov ebx,1
	mov ecx,msg2 
	mov edx,siz2
	int 80h

	call read_number
	mov ax,word[number]
	mov word[k],ax

	mov eax,0
	mov ebx,array
liner_search:
	mov word[i],0
	loop:
		mov ax,word[i]
		cmp word[n],ax
		je not_found
		mov eax,dword[i]
		mov cx,word[ebx+2*eax]
		cmp word[k],cx
		je found
		inc word[i]
		jmp loop


found:
	mov eax,4
	mov ebx,1
	mov ecx,msg3 
	mov edx,siz3
	int 80h
	
	mov eax,1
	mov ebx,0
	int 80h

not_found:
	mov eax,4
	mov ebx,1
	mov ecx,msg4
	mov edx,siz4
	int 80h
	
	mov eax,1
	mov ebx,0
	int 80h

read_number:
	pusha
	mov word[number],0

	read:

		mov eax,3
		mov ebx,0
		mov ecx,temp
		mov edx,1
		int 80h

		cmp byte[temp],10
		je end_read

	mov ax,word[number]
	mov bx,10
	mul bx
	mov bl,byte[temp]
	sub bl,30h
	mov bh,0	
	add ax,bx
	mov word[number],ax
	jmp read
end_read:
	 popa
	 ret

print_number:
	pusha

	mov byte[count],0

	ext:

		cmp word[number],0
		je print
		inc byte[count]
		mov dx,0
		mov ax,word[number]
		mov bx,10
		div bx
		push dx
		mov word[number],ax
		jmp ext

	print:
		cmp byte[count],0
		je end_print
		dec byte[count]
		pop dx
		mov byte[temp], dl
		add byte[temp],30h
		mov eax,4
		mov ebx,1
		mov ecx,temp
		mov edx,1
		int 80h
		jmp print


end_print:
	mov eax,4
	mov ebx,1
	mov ecx,newl
	mov edx,1
	int 80h
	popa
	ret

read_array:
	pusha

	read_loop:
		cmp eax,dword[n]
		je end_read_loop
		call read_number
		mov cx,word[number]
		mov word[ebx+2*eax],cx
		inc eax
		jmp  read_loop
	end_read_loop:
		popa
		ret	

end:
	mov eax,1
	mov  ebx,0
	int 80h










6.

section .data
tab: db 9
newline: db 10
msg1: db 'Enter first Matrix:',10
l1: equ $-msg1
msg2: db 'Enter second Matrix:',10
l2: equ $-msg2
msg3: db 'Enter number of rows:',10
l3: equ $-msg3
msg4: db 'Enter number of columns:',10
l4: equ $-msg4
sum: db 'Sum of Two Matrices:',10
l5: equ $-sum


section .bss
just_read: resd 1
just_print: resd 1
temp: resd 1
count: resd 1
zero: resd 1
m: resd 1
n: resd 1
array1: resd 50
array2: resd 50
i: resd 1
j: resd 1
var: resd 1


section .text
global _start:
_start:

mov eax,4
mov ebx,1
mov ecx,msg3
mov edx,l3
int 80h
call read_number
mov eax,dword[just_read]
mov dword[m],eax


mov eax,4
mov ebx,1
mov ecx,msg4
mov edx,l4
int 80h
call read_number
mov eax,dword[just_read]
mov dword[n],eax

mov eax,4
mov ebx,1
mov ecx,msg1
mov edx,l1
int 80h
mov ebx,array1
mov eax,0
mov dword[i],0
call read_2Darray


mov eax,4
mov ebx,1
mov ecx,msg2
mov edx,l2
int 80h
mov ebx,array2
mov eax,0
mov dword[i],0
call read_2Darray

mov eax,4
mov ebx,1
mov ecx,sum
mov edx,l5
int 80h
sum_matrix:

mov eax,0
mov dword[var],eax
mov dword[i],0
i_loop:
mov dword[j],0
j_loop:
mov eax,dword[var]
mov ebx,array1
mov ecx,array2
mov edx,dword[ebx+(4*eax)]
add edx,dword[ecx+(4*eax)]
mov dword[just_print],edx
call print_number
inc dword[var]
inc dword[j]
mov edx,dword[j]
cmp edx,dword[n]
jb j_loop
inc dword[i]
mov eax,4
mov ebx,1
mov ecx,newline
mov edx,1
int 80h
mov edx,dword[i]
cmp edx,dword[m]
jb i_loop

end:
mov eax,1
mov ebx,0
int 80h

read_2Darray:

pusha

row_loop1:
mov dword[j],0

col_loop1:
call read_number
mov ecx,dword[just_read]
mov dword[ebx+(4*eax)],ecx
inc eax
inc dword[j]
mov ecx,dword[j]
cmp ecx,dword[n]
jb col_loop1
inc dword[i]
mov ecx,dword[i]
cmp ecx,dword[m]
jb row_loop1

end_read_2Darray:

popa
ret

print_2Darray:

pusha
mov dword[i],0

row_loop2:
mov dword[j],0

col_loop2:
mov ecx,dword[ebx+(4*eax)]
mov dword[just_print],ecx
call print_number

pusha
mov eax,4
mov ebx,1
mov ecx,tab
mov edx,1
int 80h
popa

inc eax
inc dword[j]
mov ecx,dword[j]
cmp ecx,dword[n]
jb col_loop2

pusha 
mov eax,4
mov ebx,1
mov ecx,newline
mov edx,1
int 80h
popa

inc dword[i]
mov ecx,dword[i]
cmp ecx,dword[m]
jb row_loop2

end_print_2Darray:

popa
ret

read_number:

pusha
mov dword[just_read],0
reading:
mov eax,3
mov ebx,0
mov ecx,temp
mov edx,1
int 80h

cmp dword[temp],10
je end_read
sub dword[temp],30h
mov eax,dword[just_read]
mov edx,0
mov ebx,10
mul ebx
add eax,dword[temp]
mov dword[just_read],eax
jmp reading

end_read:

popa
ret

print_number:

pusha
mov dword[count],0
cmp dword[just_print],0
jne extracting
mov dword[zero],30h
mov eax,4
mov ebx,1
mov ecx,zero
mov edx,1
int 80h
jmp end_print

extracting:

cmp dword[just_print],0
je printing
mov eax,dword[just_print]
mov edx,0
mov ebx,10
div ebx
push edx
mov dword[just_print],eax
inc dword[count]
jmp extracting

printing:

cmp dword[count],0
je end_print
pop edx
add edx,30h
mov dword[temp],edx
mov eax,4
mov ebx,1
mov ecx,temp
mov edx,1
int 80h
dec dword[count]
jmp printing

end_print:
mov eax,4
mov ebx,1
mov ecx,tab
mov edx,1
int 80h

popa
ret





7.
section .bss
	str:resb 300
	str_len:resb 1
	ele:resb 1
	noc:resd 1
	nod:resd 1
	dig:resd 1
	num:resd 1


section .data
	msg1:db 'Enter string :'
	msg1_len:equ $-msg1
	pal_msg:db 'It is a palindrome',10
	pal_len:equ $-pal_msg
	not_pal:db 'It is NOT a palindrome',10
	not_len:equ $-not_pal
	
section .text
	global _start:
	_start:

			mov ecx,msg1
			mov edx,msg1_len
			call print_text

			call input_string

			mov esi,str
			mov edi,str
			add edi,[noc]
			dec edi
			cld 

			palindrome_checker:

			cmpsb
			jne not_palindrome_print

			sub edi,2
			dec dword[noc]
			cmp dword[noc],0
			jne palindrome_checker

			mov ecx,pal_msg
			mov edx,pal_len
			call print_text

			jmp exit

			not_palindrome_print:
			mov ecx,not_pal
			mov edx,not_len
			call print_text

			exit:

			mov eax,1
			mov ebx,0
			int 80h

			

	;print
			print_text:
			pusha
			mov eax,4
			mov ebx,1
			int 80h
			popa
			ret

			

	;Input string
			input_string:
			pusha
			mov edi,str
			mov dword[noc],0
			cld

			continue_input:

			mov eax,3
			mov ebx,0
			mov ecx,ele
			mov edx,1
			int 80h

			cmp byte[ele],10
			je end_input

			mov al,[ele]
			stosb
			inc dword[noc]
			jmp continue_input

			end_input:

			mov al,0
			stosb

			popa
			ret
			